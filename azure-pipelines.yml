# Starter pipeline
trigger:
- main
- feature/*

# pool: "Default"
pool:
  vmImage: ubuntu-latest

steps:

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: 'Build Project'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(Build.SourcesDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
    reportDirectory: '$(Build.SourcesDirectory)/**/reports/jacoco/test/html'
  displayName: 'Unit test'
    

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
        **/build/libs/*.jar
        **/build/**/*.xml
        **/build/**/*.html
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: artefacto
    publishLocation: 'Container'
    
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'artefacto'
    downloadPath: '$(Pipeline.Workspace)'
- script: "mkdir -p build/libs; mv $(Pipeline.workSpace)/artefacto/build/libs/ build/; chmod -R 555 build/libs"
  displayName: Download and move artifact
  

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloudConnection'
    organization: 'ibanezstudio'
    scannerMode: 'CLI'
    configMode: 'file'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'


- task: Docker@2
  inputs:
    containerRegistry: 'dockerConnection'
    command: 'login'
  displayName: Docker Login

- task: Docker@2
  inputs:
    containerRegistry: 'dockerConnection'
    repository: 'estebanibannezp/spring-devops-image'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: 'latest'
  displayName: Docker image build

- task: Docker@2
  inputs:
    containerRegistry: 'dockerConnection'
    repository: 'estebanibannezp/spring-devops-image'
    command: 'push'
    tags: 'latest'
  displayName: Docker image push

# - task: KubectlInstaller@0
#   inputs:
#     kubectlVersion: 'latest'
      
# - task: Kubernetes@1
#   inputs:
#     connectionType: 'Kubernetes Service Connection'
#     kubernetesServiceEndpoint: 'kubernetesConnection'
#     namespace: 'default'
#     command: 'login'
#   displayName: AKS Login

# - task: Kubernetes@1
#   inputs:
#     connectionType: 'Azure Resource Manager'
#     azureSubscriptionEndpoint: 'Suscripción de Azure 1(b7138765-0e9b-4a25-84e7-938471f7d1ed)'
#     azureResourceGroup: 'AKS'
#     kubernetesCluster: 'aks-devops-usach'
#     namespace: 'default'
#     command: 'apply'
#     arguments: '-f deployment-app.yaml'
#     secretType: 'dockerRegistry'
#     containerRegistryType: 'Azure Container Registry'
#     azureSubscriptionEndpointForSecrets: 'Suscripción de Azure 1(b7138765-0e9b-4a25-84e7-938471f7d1ed)'
#   displayName: AKS deploy
    
# - task: Kubernetes@1
#   inputs:
#     connectionType: 'Kubernetes Service Connection'
#     kubernetesServiceEndpoint: 'kubernetesConnection'
#     namespace: 'default'
#     command: 'expose'
#     arguments: 'deployment microservice-spring-deployment --type=LoadBalancer --name=devops-usach'
#     # secretType: 'dockerRegistry'
#     # containerRegistryType: 'Azure Container Registry'
#   continueOnError: true
#   displayName: Expose deployment
    
# - script: |
#     ipApp=$(kubectl get services devops-usach --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
#     echo $ipApp
#     URLApp=http://$ipApp:8080
#     echo $URLApp
#     echo "##vso[task.setvariable variable=appDeploy;isOutput=true]$URLApp"
#   name: getip
#   displayName: Get IP