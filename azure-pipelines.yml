# Starter pipeline
# trigger:
# - main

# pool: "Default"
pool:
  vmImage: ubuntu-latest

steps:

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: 'BUILD PROJECT GRADLE'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(Build.SourcesDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
    
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      '**/build/libs/*.jar'
      '**/build/**/*.xml'
      '**/build/**/*.html'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'artefacto'
    publishLocation: 'Container'
    
- task: DownloadBuildArtifacts@1
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'artefacto'
    downloadPath: '$(Pipeline.workSpace)'
  displayName: DOWNLOAD ARTIFACT

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloudConnection'
    organization: 'ibanezstudio'
    projectKey: 'IbanezStudio_DevOps-foundation-v3'
    projectName: 'DevOps-foundation-v3'
    extraProperties: |
      sonar.coverage.jacoco.xmlReportPaths=${Pipeline.Workspace}/artefacto/build/reports/jacoco/test/jacocoTestReport.xml
  displayName: PREPARE SONARCLOUD SCANNER

- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'sonarqube'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: true
    sqGradlePluginVersionChoice: 'specify'
    sonarQubeGradlePluginVersion: '3.3'
    spotBugsAnalysis: false


- task: Docker@2
  inputs:
    containerRegistry: 'dockerConnection'
    command: 'login'
  displayName: DOCKER LOGIN

- task: Docker@2
  inputs:
    containerRegistry: 'dockerConnection'
    repository: 'estebanibannezp/spring-devops-image'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: 'latest'
  displayName: DOCKER BUILD IMAGE

- task: Docker@2
  inputs:
    containerRegistry: 'dockerConnection'
    repository: 'estebanibannezp/spring-devops-image'
    command: 'push'
    tags: 'latest'
  displayName: DOCKER PUSH IMAGE

- task: KubectlInstaller@0
  inputs:
    kubectlVersion: 'latest'

- task: Kubernetes@1
  inputs:
    connectionType: 'None'
    namespace: 'default'
    command: 'apply'
    arguments: '-f deployment-app.yaml'